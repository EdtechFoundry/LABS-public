{"version":3,"sources":["bot_green_heart.png","InputField.js","BotOutput.js","BotOutputs.js","QuickReply.js","QuickReplies.js","Undo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputField","props","sayToBot","a","isConversationEnded","loadConversationLog","setConversationEnded","userInput","isQuickReplyInput","inputRef","current","value","axios","post","buildApiUrl","input","res","setConversationState","data","conversationState","setUndoAvailable","conversationSteps","length","conversationOutputs","conversationOutput","output","updateBotOutputs","keyPress","e","keyCode","submitRef","activePowerModeAnimation","inputField","this","className","id","element","getBeforeInit","instance","type","onKeyDown","autoComplete","tabIndex","tabIndexInput","options","speed","waitUntilVisible","lifeLike","cursor","afterComplete","makeVisibleReplyButtonClick","ref","onClick","tabIndexSubmit","isClickAnimation","React","BotOutput","wait","strings","text","startQuickReplyAnimation","Component","BotOutputs","times","outputElements","outputs","map","index","arr","div","key","initial","exit","y","opacity","transition","duration","animate","setBotOutputAnimationFinished","botOutputsRef","QuickReply","setTextToInputField","setUserInput","quickReply","onClickQuickReply","removeQuickReplies","onKeyPress","x","QuickReplies","ret","isBotOutputAnimationFinished","quickReplyElements","quickReplies","Undo","onClickUndo","undo","onComplete","then","isUndoAvailable","icon","faUndo","userId","uuidv4","path","startsWith","PowerModeInput","make","height","tha","g","num","radius","circle","alpha","color","App","context","clearBotOutputAnimationFinished","get","setState","botOutputs","addIndex","elements","setQuickReplyInput","state","setTimeout","animateButtonClick","click","createRef","focus","src","botIcon","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88622b21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bot_green_heart.0100a92f.png\";","import axios from 'axios';\r\nimport {activePowerModeAnimation, buildApiUrl,} from \"./App\";\r\nimport TypeIt from \"typeit-react\";\r\nimport * as React from \"react\";\r\n\r\nexport class InputField extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputRef = props.inputRef;\r\n        this.submitRef = props.submitRef;\r\n    }\r\n\r\n    componentDidMount() {\r\n        activePowerModeAnimation();\r\n    }\r\n\r\n    sayToBot = async () => {\r\n        if (this.props.isConversationEnded) {\r\n            this.props.loadConversationLog();\r\n            this.props.setConversationEnded(false);\r\n        } else {\r\n\r\n            let userInput = this.props.isQuickReplyInput ? this.props.userInput : this.inputRef.current.value;\r\n\r\n            if (userInput !== '') {\r\n                let res = await axios.post(buildApiUrl(), {input: userInput});\r\n\r\n                this.props.setConversationState(res.data.conversationState);\r\n\r\n                if (res.data.conversationState === 'ENDED') {\r\n                    this.props.setUndoAvailable(false);\r\n                } else {\r\n                    this.props.setUndoAvailable(res.data.conversationSteps.length > 1);\r\n                }\r\n\r\n                let conversationOutputs = res.data.conversationOutputs;\r\n\r\n                let conversationOutput;\r\n                if (conversationOutputs.length > 0) {\r\n                    conversationOutput = conversationOutputs[conversationOutputs.length - 1];\r\n\r\n                    if (typeof conversationOutput.output == \"undefined\") {\r\n                        conversationOutput.output = [ // default fallback\r\n                            {\r\n                                \"text\": \"I am so sorry 😥\",\r\n                                \"type\": \"text\"\r\n                            },\r\n                            {\r\n                                \"text\": \"But this is only a demo...\",\r\n                                \"type\": \"text\"\r\n                            },\r\n                            {\r\n                                \"text\": \"Use the back button ⬅ and try me again 👀✌\",\r\n                                \"type\": \"text\"\r\n                            }\r\n                        ]\r\n                    }\r\n\r\n                    this.props.updateBotOutputs(conversationOutput);\r\n                }\r\n\r\n                if (!this.props.isQuickReplyInput && this.inputRef.current != null) {\r\n                    this.inputRef.current.value = '';\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    keyPress = (e) => {\r\n        if (e.keyCode === 13) {\r\n            this.sayToBot();\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        let inputField;\r\n        if (this.props.isConversationEnded) {\r\n            inputField =\r\n                <div className=\"chatbotOutput\">\r\n                    Conversation has Ended\r\n                </div>\r\n        } else if (this.props.isQuickReplyInput) {\r\n            inputField =\r\n                <TypeIt\r\n                    id=\"animatedUserInputField\"\r\n                    element={\"input\"}\r\n                    getBeforeInit={instance => {\r\n                        instance.type(this.props.userInput);\r\n                        return instance;\r\n                    }}\r\n                    onKeyDown={this.keyPress}\r\n                    autoComplete=\"off\"\r\n                    className=\"inputField\"\r\n                    tabIndex={this.props.tabIndexInput}\r\n                    options={{\r\n                        speed: 30,\r\n                        waitUntilVisible: true,\r\n                        lifeLike: true,\r\n                        cursor: true,\r\n                        afterComplete: this.props.makeVisibleReplyButtonClick\r\n                    }}\r\n                />\r\n        } else {\r\n            inputField =\r\n                <input id=\"userInputField\"\r\n                       onKeyDown={this.keyPress}\r\n                       autoComplete=\"off\"\r\n                       ref={this.inputRef}\r\n                       className=\"inputField\"\r\n                       tabIndex={this.props.tabIndexInput}/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"inputFieldContainer\">\r\n                {inputField}\r\n                <button type=\"submit\"\r\n                        ref={this.submitRef}\r\n                        onClick={this.sayToBot}\r\n                        tabIndex={this.props.tabIndexSubmit}\r\n                        className={(this.props.isClickAnimation ? 'onClickAnimation' : '') +\r\n                        (this.props.isConversationEnded ? ' btnRestartConversation' : '')}>\r\n                    {this.props.isConversationEnded ? 'restart conversation' : 'reply'}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport TypeIt from \"typeit-react\";\r\nimport Delay from \"react-delay\";\r\n\r\nexport class BotOutput extends React.Component {\r\n    render() {\r\n        return (\r\n            <span className=\"chatbotOutput\" tabIndex={this.props.tabIndex}>\r\n                <Delay wait={1500}>\r\n                    <TypeIt options={{\r\n                        strings: [this.props.output.text],\r\n                        speed: 30,\r\n                        waitUntilVisible: true,\r\n                        lifeLike: true,\r\n                        cursor: false,\r\n                        afterComplete: this.props.startQuickReplyAnimation\r\n                    }}>\r\n                    </TypeIt>\r\n                </Delay>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {BotOutput} from \"./BotOutput\";\r\nimport Delay from \"react-delay/lib/Delay\";\r\nimport {AnimatePresence, motion} from \"framer-motion\";\r\n\r\nexport class BotOutputs extends React.Component {\r\n    render() {\r\n        let time = 3000;\r\n        let times = 0;\r\n        let outputElements =\r\n            this.props.outputs.map((output, index, arr) =>\r\n                <motion.div key={output.index} initial={false} exit={{y: -300, opacity: 0}}\r\n                            transition={{duration: 0.3}}>\r\n                    <Delay wait={(time * times++)}>\r\n                        <motion.div initial={{y: 300}} animate={{y: 150}} transition={{duration: 2}}>\r\n                            <BotOutput output={output}\r\n                                       tabIndex={output.index + 1}\r\n                                       startQuickReplyAnimation={index === arr.length - 1 ?\r\n                                           this.props.setBotOutputAnimationFinished : () => {}}/>\r\n                        </motion.div>\r\n                    </Delay>\r\n                </motion.div>\r\n            );\r\n\r\n        return (\r\n            <span className=\"botOutputsContainer\" ref={this.props.botOutputsRef}>\r\n                <AnimatePresence>\r\n                    {outputElements}\r\n                </AnimatePresence>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {motion} from \"framer-motion\";\r\n\r\nexport class QuickReply extends React.Component {\r\n\r\n    setTextToInputField = () => {\r\n        this.props.setUserInput(this.props.quickReply.value);\r\n    };\r\n\r\n    onClickQuickReply = () => {\r\n        this.setTextToInputField();\r\n        this.props.removeQuickReplies();\r\n    };\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.keyCode === 13) {\r\n            this.onClickQuickReply();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <motion.div initial={{x: 200, opacity: 0}}\r\n                        animate={{x: 0, opacity: 1}}\r\n                        transition={{duration: 0.5}}\r\n                        className=\"containerEunit\"\r\n                        tabIndex={this.props.tabIndex}\r\n                        onKeyDown={this.onKeyPress}>\r\n                    <span className=\"quickReply\" onClick={this.onClickQuickReply}>\r\n                        {this.props.quickReply.value}\r\n                    </span>\r\n            </motion.div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {QuickReply} from \"./QuickReply\";\r\nimport Delay from \"react-delay/lib/Delay\";\r\n\r\nexport class QuickReplies extends React.Component {\r\n    render() {\r\n        let ret = <span/>;\r\n        if (this.props.isBotOutputAnimationFinished) {\r\n            let time = 200;\r\n            let times = 1;\r\n            let quickReplyElements = this.props.quickReplies.map((quickReply, index) =>\r\n                <Delay key={quickReply.index} wait={time * times++}>\r\n                    <QuickReply\r\n                        quickReply={quickReply}\r\n                        inputRef={this.props.inputRef}\r\n                        removeQuickReplies={this.props.removeQuickReplies}\r\n                        setUserInput={this.props.setUserInput}\r\n                        tabIndex={quickReply.index + 1}/>\r\n                </Delay>\r\n            );\r\n\r\n            ret =\r\n                <div className=\"quickReplyContainer\">\r\n                    {quickReplyElements}\r\n                </div>\r\n        }\r\n\r\n        return (ret);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport axios from \"axios\";\r\nimport {buildApiUrl} from \"./App\";\r\nimport {faUndo} from \"@fortawesome/free-solid-svg-icons/faUndo\";\r\n\r\nexport class Undo extends React.Component {\r\n\r\n    onClickUndo = () => {\r\n        let loadConversationLog = this.props.loadConversationLog;\r\n        this.undo(() => {\r\n            loadConversationLog();\r\n        });\r\n    };\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.keyCode === 13) {\r\n            this.onClickUndo();\r\n        }\r\n    };\r\n\r\n    undo = async (onComplete) => {\r\n        await axios.post(buildApiUrl('undo')).then(onComplete);\r\n    };\r\n\r\n    render() {\r\n        let ret = <span/>;\r\n        if (this.props.isUndoAvailable) {\r\n            ret = <FontAwesomeIcon icon={faUndo} onClick={this.onClickUndo} className=\"undoIcon\"/>\r\n        }\r\n\r\n        return (ret);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport axios from \"axios\";\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nimport botIcon from './bot_green_heart.png';\r\nimport './App.css';\r\n\r\nimport {InputField} from \"./InputField\";\r\nimport {BotOutputs} from \"./BotOutputs\";\r\nimport {QuickReplies} from \"./QuickReplies\";\r\nimport {Undo} from \"./Undo\";\r\nimport PowerModeInput from \"power-mode-input\";\r\n\r\n\r\nexport let userId = uuidv4();\r\n\r\nexport const eddiApiUrl = `https://app.labs.ai/managedbots/partygrouping/`;\r\n\r\nlet index = 0;\r\n\r\nexport let buildApiUrl = (path) => {\r\n    if (!path) {\r\n        path = '';\r\n    }\r\n\r\n    if (!path.startsWith('/')) {\r\n        path = '/' + path;\r\n    }\r\n    return `${eddiApiUrl}${userId}${path}?returnCurrentStepOnly=false`;\r\n}\r\n\r\nexport let activePowerModeAnimation = () => {\r\n    PowerModeInput.make('.inputField', {\r\n        height: 2,\r\n        tha: [0, 360],\r\n        g: 0.1,\r\n        num: 1,\r\n        radius: 2,\r\n        circle: true,\r\n        alpha: [0.75, 0.1],\r\n        color: \"#67AB67\"\r\n    });\r\n}\r\n\r\nexport class App extends React.Component {\r\n\r\n    conversationState;\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            userInput: '',\r\n            botOutputs: [],\r\n            quickReplies: [],\r\n            isConversationEnded: false,\r\n            isBotOutputAnimationFinished: false,\r\n            isUndoAvailable: false,\r\n            isQuickReplyInput: false,\r\n            isClickAnimation: false,\r\n            tabIndex: 1\r\n        };\r\n\r\n        this.botOutputsRef = React.createRef();\r\n        this.inputRef = React.createRef();\r\n        this.submitRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadConversationLog();\r\n        this.botOutputsRef.current.focus();\r\n    }\r\n\r\n    loadConversationLog = async () => {\r\n        this.clearBotOutputAnimationFinished();\r\n\r\n        let res = await axios.get(buildApiUrl());\r\n\r\n        this.setConversationState(res.data.conversationState);\r\n\r\n        if (res.data.conversationState === 'ENDED') {\r\n            this.setUndoAvailable(false);\r\n        } else {\r\n            this.setUndoAvailable(res.data.conversationSteps.length > 1);\r\n        }\r\n\r\n        let conversationOutputs = res.data.conversationOutputs;\r\n\r\n        if (conversationOutputs.length > 0) {\r\n            let conversationOutput = conversationOutputs[conversationOutputs.length - 1];\r\n\r\n            if (conversationOutput.output) {\r\n                this.setState({botOutputs: this.addIndex(conversationOutput.output)});\r\n            }\r\n\r\n            if (conversationOutput.quickReplies) {\r\n                this.setState({quickReplies: this.addIndex(conversationOutput.quickReplies)});\r\n            }\r\n        }\r\n    };\r\n\r\n    addIndex = (elements) => {\r\n        if (elements) {\r\n            return elements.map(element => ({\r\n                ...element,\r\n                index: index++,\r\n            }));\r\n        } else return [];\r\n    };\r\n\r\n    updateBotOutputs = (conversationOutput) => {\r\n        this.clearBotOutputAnimationFinished();\r\n        this.setState({botOutputs: this.addIndex(conversationOutput.output)});\r\n        this.setState({quickReplies: this.addIndex(conversationOutput.quickReplies)});\r\n        this.setQuickReplyInput(false);\r\n    };\r\n    removeQuickReplies = () => {\r\n        this.setState({quickReplies: []});\r\n        this.setState({isBotOutputAnimationFinished: false});\r\n    };\r\n\r\n    setBotOutputAnimationFinished = () => {\r\n        this.setState({isBotOutputAnimationFinished: true});\r\n\r\n        if (this.conversationState === 'ENDED') {\r\n            this.setConversationEnded(true);\r\n        } else {\r\n            this.setConversationEnded(false);\r\n        }\r\n    };\r\n\r\n    clearBotOutputAnimationFinished = () => {\r\n        this.setState({isBotOutputAnimationFinished: false});\r\n    };\r\n\r\n    setUndoAvailable = (isUndoAvailable) => {\r\n        this.setState({isUndoAvailable: isUndoAvailable});\r\n    }\r\n\r\n    setConversationEnded = (isConversationEnded) => {\r\n        this.setState({isConversationEnded: isConversationEnded});\r\n    }\r\n\r\n    setConversationState = (conversationState) => {\r\n        this.conversationState = conversationState;\r\n    }\r\n\r\n    setUserInput = (userInput) => {\r\n        this.setState({userInput: userInput});\r\n        this.setQuickReplyInput(true);\r\n    }\r\n\r\n    setQuickReplyInput = (isQuickReplyInput) => {\r\n        this.setState({isQuickReplyInput: isQuickReplyInput});\r\n        if (!this.state.isConversationEnded) {\r\n            activePowerModeAnimation();\r\n        }\r\n    }\r\n\r\n    makeVisibleReplyButtonClick = () => {\r\n        setTimeout(() => {\r\n            this.animateButtonClick();\r\n            this.submitRef.current.click();\r\n        }, 500);\r\n    }\r\n\r\n    animateButtonClick = () => {\r\n        this.setState({isClickAnimation: true});\r\n        setTimeout(() => {\r\n            this.setState({isClickAnimation: false});\r\n        }, 500);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <img src={botIcon} className=\"botIcon\" alt=\"logo icon\"/>\r\n\r\n                <Undo isUndoAvailable={this.state.isUndoAvailable}\r\n                      loadConversationLog={this.loadConversationLog}/>\r\n\r\n                <BotOutputs outputs={this.state.botOutputs}\r\n                            botOutputsRef={this.botOutputsRef}\r\n                            setBotOutputAnimationFinished={this.setBotOutputAnimationFinished}/>\r\n\r\n                <QuickReplies quickReplies={this.state.quickReplies}\r\n                              inputRef={this.inputRef}\r\n                              removeQuickReplies={this.removeQuickReplies}\r\n                              isBotOutputAnimationFinished={this.state.isBotOutputAnimationFinished}\r\n                              loadConversationLog={this.loadConversationLog}\r\n                              setUserInput={this.setUserInput}/>\r\n\r\n                <InputField inputRef={this.inputRef}\r\n                            submitRef={this.submitRef}\r\n                            tabIndexInput={index + 1}\r\n                            tabIndexSubmit={index + 2}\r\n                            userInput={this.state.userInput}\r\n                            updateBotOutputs={this.updateBotOutputs}\r\n                            setUndoAvailable={this.setUndoAvailable}\r\n                            isQuickReplyInput={this.state.isQuickReplyInput}\r\n                            makeVisibleReplyButtonClick={this.makeVisibleReplyButtonClick}\r\n                            isClickAnimation={this.state.isClickAnimation}\r\n                            setConversationState={this.setConversationState}\r\n                            setConversationEnded={this.setConversationEnded}\r\n                            isConversationEnded={this.state.isConversationEnded}\r\n                            loadConversationLog={this.loadConversationLog}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}