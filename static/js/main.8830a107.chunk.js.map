{"version":3,"sources":["bot_green_heart.png","InputField.js","BotOutput.js","BotOutputs.js","QuickReply.js","QuickReplies.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputField","props","sayToBot","a","userInput","inputRef","current","value","axios","post","eddiApiUrl","input","res","conversationOutputs","data","length","conversationOutput","updateBotOutputs","keyPress","e","keyCode","PowerModeInput","make","this","height","tha","g","num","radius","circle","alpha","color","className","id","autoFocus","onKeyDown","autoComplete","ref","tabIndex","type","onClick","React","Component","BotOutput","wait","options","strings","output","text","speed","waitUntilVisible","lifeLike","cursor","afterComplete","startQuickReplyAnimation","BotOutputs","times","outputElements","outputs","map","index","arr","key","div","initial","exit","y","opacity","transition","duration","animate","setBotOutputAnimationFinished","QuickReply","setTextToInputField","quickReply","onClickQuickReply","removeQuickReplies","focus","onKeyPress","x","isUndoAvailable","QuickReplies","onClickUndo","quickReplyElements","quickReplies","ret","isBotOutputAnimationFinished","userId","uuidv4","App","context","loadConversationLog","get","setState","botOutputs","addIndex","elements","element","state","createRef","src","botIcon","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8830a107.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bot_green_heart.0100a92f.png\";","import PowerModeInput from \"power-mode-input\";\r\nimport React from \"react\";\r\nimport axios from 'axios';\r\nimport {eddiApiUrl} from \"./App\";\r\n\r\nexport class InputField extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputRef = props.inputRef;\r\n    }\r\n\r\n    componentDidMount() {\r\n        PowerModeInput.make(this.inputRef.current, {\r\n            height: 2,\r\n            tha: [0, 360],\r\n            g: 0.1,\r\n            num: 1,\r\n            radius: 2,\r\n            circle: true,\r\n            alpha: [0.75, 0.1],\r\n            color: \"#67AB67\"\r\n        });\r\n    }\r\n\r\n    sayToBot = async () => {\r\n        let userInput = this.inputRef.current.value;\r\n        if (userInput !== '') {\r\n            let res = await axios.post(eddiApiUrl, {input: userInput});\r\n            let conversationOutputs = res.data.conversationOutputs;\r\n\r\n            if (conversationOutputs.length > 0) {\r\n                let conversationOutput = conversationOutputs[0];\r\n                this.props.updateBotOutputs(conversationOutput);\r\n            }\r\n\r\n            //reset inputField\r\n            this.inputRef.current.value = \"\";\r\n        }\r\n    };\r\n\r\n    keyPress = (e) => {\r\n        if (e.keyCode === 13) {\r\n            this.sayToBot();\r\n        }\r\n    };\r\n\r\n    /*setStringToType = (instance) => {\r\n        console.log(\"setStringToType YEAH\");\r\n        instance.type(this.props.userInput);\r\n        return instance;\r\n    };*/\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"inputFieldContainer\">\r\n                <input id=\"userInputField\" autoFocus\r\n                       onKeyDown={this.keyPress}\r\n                       autoComplete=\"off\"\r\n                       ref={this.inputRef}\r\n                       className=\"inputField\"\r\n                       tabIndex={1}/>\r\n                <button type=\"submit\" onClick={this.sayToBot}>reply</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport TypeIt from \"typeit-react\";\r\nimport Delay from \"react-delay\";\r\n\r\nexport class BotOutput extends React.Component {\r\n    render() {\r\n        return (\r\n            <span className=\"chatbotOutput\">\r\n                <Delay wait={1500}>\r\n                    <TypeIt options={{\r\n                        strings: [this.props.output.text],\r\n                        speed: 30,\r\n                        waitUntilVisible: true,\r\n                        lifeLike: true,\r\n                        cursor: false,\r\n                        afterComplete: this.props.startQuickReplyAnimation\r\n                    }}>\r\n                    </TypeIt>\r\n                </Delay>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {BotOutput} from \"./BotOutput\";\r\nimport Delay from \"react-delay/lib/Delay\";\r\nimport {AnimatePresence, motion} from \"framer-motion\";\r\n\r\nexport class BotOutputs extends React.Component {\r\n    render() {\r\n        let time = 3000;\r\n        let times = 0;\r\n        let outputElements =\r\n            this.props.outputs.map((output, index, arr) =>\r\n\r\n                <Delay key={output.index} wait={(time * times++)}>\r\n                    <motion.div initial={false} exit={{y: -300, opacity: 0}} transition={{duration: 0.5}}>\r\n                        <motion.div initial={{y: 300}} animate={{y: 0}} transition={{duration: 2}}>\r\n                            <BotOutput output={output}\r\n                                       startQuickReplyAnimation={index === arr.length - 1 ?\r\n                                           this.props.setBotOutputAnimationFinished : () => {}}/>\r\n                        </motion.div>\r\n                    </motion.div>\r\n                </Delay>\r\n            );\r\n\r\n        return (\r\n            <span className=\"botOutputsContainer\">\r\n                <AnimatePresence>\r\n                    {outputElements}\r\n                </AnimatePresence>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {motion} from \"framer-motion\";\r\n\r\nexport class QuickReply extends React.Component {\r\n\r\n    setTextToInputField = () => {\r\n        this.props.inputRef.current.value = this.props.quickReply.value;\r\n    };\r\n\r\n    onClickQuickReply = () => {\r\n        this.setTextToInputField();\r\n        this.props.removeQuickReplies();\r\n        this.props.inputRef.current.focus();\r\n    };\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.keyCode === 13) {\r\n            this.onClickQuickReply();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <motion.div initial={{x: 200, opacity: 0}}\r\n                        animate={{x: 0, opacity: 1}}\r\n                        transition={{duration: 0.5}}\r\n                        className=\"containerEunit\"\r\n                        tabIndex={this.props.tabIndex}\r\n                        onKeyDown={this.onKeyPress}>\r\n                    <span className=\"quickReply\" onClick={this.onClickQuickReply}>\r\n                        {this.props.quickReply.value}\r\n                    </span>\r\n            </motion.div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {QuickReply} from \"./QuickReply\";\r\nimport Delay from \"react-delay/lib/Delay\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faUndo} from \"@fortawesome/free-solid-svg-icons/faUndo\";\r\nimport axios from \"axios\";\r\nimport {eddiApiUrl} from \"./App\";\r\n\r\nlet isUndoAvailable = async () => {\r\n    /*let res = await axios.get(eddiApiUrl + '/undo');\r\n    console.log(\"undo available\", res.data);\r\n    return res.data === true;*/\r\n\r\n    return false;\r\n};\r\n\r\nlet undo = async () => {\r\n    console.log(\"undo pressed!\");\r\n    await axios.post(eddiApiUrl + '/undo');\r\n};\r\n\r\nexport class QuickReplies extends React.Component {\r\n    onClickUndo = () => {\r\n        //undo();\r\n        //this.props.loadConversationLog();\r\n    };\r\n\r\n    render() {\r\n        let time = 200;\r\n        let times = 1;\r\n        let quickReplyElements = this.props.quickReplies.map((quickReply, index) =>\r\n            <Delay key={quickReply.index} wait={time * times++}>\r\n                <QuickReply\r\n                    quickReply={quickReply}\r\n                    inputRef={this.props.inputRef}\r\n                    removeQuickReplies={this.props.removeQuickReplies}\r\n                    tabIndex={index + 2}/>\r\n            </Delay>\r\n        );\r\n        /*<FontAwesomeIcon icon={faUndo} onClick={this.onClickUndo} className=\"undoIcon\"/>*/\r\n        /*<i className=\"fas fa-arrow-left\"></i>*/\r\n        let ret = <span/>;\r\n        if (this.props.isBotOutputAnimationFinished) {\r\n            if (isUndoAvailable()) {\r\n                ret =\r\n                    <div className=\"quickReplyContainer\">\r\n\r\n                        {quickReplyElements}\r\n                    </div>\r\n            } else {\r\n                ret =\r\n                    <div className=\"quickReplyContainer\">\r\n                        {quickReplyElements}\r\n                    </div>\r\n            }\r\n\r\n        }\r\n\r\n        return (ret);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport axios from \"axios\";\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nimport botIcon from './bot_green_heart.png';\r\nimport './App.css';\r\n\r\nimport {InputField} from \"./InputField\";\r\nimport {BotOutputs} from \"./BotOutputs\";\r\nimport {QuickReplies} from \"./QuickReplies\";\r\n\r\n\r\nexport let userId = uuidv4();\r\n\r\nexport const eddiApiUrl = `https://app.labs.ai/managedbots/partygrouping/${userId}`;\r\n\r\nlet index = 0;\r\n\r\nexport class App extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            userInput: \"\",\r\n            botOutputs: [],\r\n            quickReplies: [],\r\n            isBotOutputAnimationFinished: false\r\n        };\r\n\r\n        this.inputRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadConversationLog();\r\n    }\r\n\r\n    loadConversationLog = async () => {\r\n        let res = await axios.get(eddiApiUrl);\r\n        let conversationOutputs = res.data.conversationOutputs;\r\n\r\n        if (conversationOutputs.length > 0) {\r\n            let conversationOutput = conversationOutputs[0];\r\n\r\n            if (conversationOutput.output) {\r\n                this.setState({botOutputs: this.addIndex(conversationOutput.output)});\r\n            }\r\n\r\n            if (conversationOutput.quickReplies) {\r\n                this.setState({quickReplies: this.addIndex(conversationOutput.quickReplies)});\r\n            }\r\n        }\r\n    };\r\n\r\n    addIndex = (elements) => {\r\n        if (elements) {\r\n            return elements.map(element => ({\r\n                ...element,\r\n                index: index++,\r\n            }));\r\n        } else return [];\r\n    };\r\n\r\n    updateBotOutputs = (conversationOutput) => {\r\n        this.setState({botOutputs: this.addIndex(conversationOutput.output)});\r\n        this.setState({quickReplies: this.addIndex(conversationOutput.quickReplies)});\r\n    };\r\n\r\n    removeQuickReplies = () => {\r\n        this.setState({quickReplies: []});\r\n        this.setState({isBotOutputAnimationFinished: false});\r\n    };\r\n\r\n    setBotOutputAnimationFinished = () => {\r\n        this.setState({isBotOutputAnimationFinished: true});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <img src={botIcon} className=\"botIcon\" alt=\"logo icon\"/>\r\n\r\n                <BotOutputs outputs={this.state.botOutputs}\r\n                            setBotOutputAnimationFinished={this.setBotOutputAnimationFinished}/>\r\n\r\n                <QuickReplies quickReplies={this.state.quickReplies}\r\n                              inputRef={this.inputRef}\r\n                              removeQuickReplies={this.removeQuickReplies}\r\n                              isBotOutputAnimationFinished={this.state.isBotOutputAnimationFinished}\r\n                              loadConversationLog={this.loadConversationLog}/>\r\n\r\n                <InputField inputRef={this.inputRef}\r\n                            userInput={this.state.userInput}\r\n                            updateBotOutputs={this.updateBotOutputs}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}